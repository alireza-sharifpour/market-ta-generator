name: Deploy to Server

# Trigger the workflow on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest # Use GitHub's provided runners

    steps:
      - name: Checkout code (Optional but good practice)
        uses: actions/checkout@v4 # Checks out your repository code onto the runner

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master # Popular action for SSH commands
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the deployment directory on the server
            cd ${{ secrets.DEPLOY_PATH }}

            # Ensure we're on the main branch and get latest changes
            echo ">>> Checking out main branch and pulling latest changes..."
            git checkout main
            git pull origin main

            # Verify .env file exists (should be manually placed on server)
            if [ ! -f .env ]; then
              echo "ERROR: .env file not found at ${{ secrets.DEPLOY_PATH }}/.env"
              exit 1
            fi

            # Check if any application code or dependencies changed in the last commit
            # This includes: app/ directory, requirements.txt, or Dockerfile
            if git diff HEAD~1 --name-only | grep -E "^app/|requirements.txt|Dockerfile"; then
              echo ">>> Application changes detected, performing full rebuild..."

              # Stop all running containers gracefully
              docker compose down
              docker stop market-ta-generator || true
              docker rm market-ta-generator || true

              # Rebuild Docker image without using cache
              docker compose build --no-cache

              # Start services in detached mode
              docker compose up -d
            else
              echo ">>> No application changes detected, performing restart only..."

              # If only config or non-code files changed, just restart containers
              # This is much faster than a full rebuild
              docker compose restart
            fi

            # Clean up unused Docker images to save disk space
            # -f flag forces removal without confirmation
            echo ">>> Cleaning up unused Docker images..."
            docker image prune -f

            echo ">>> Deployment completed successfully!"
