version: "3.8"

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  loki_data:
  grafana_data:
  app_logs:
  redis_data:

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: market-ta-generator
    container_name: market-ta-generator
    restart: unless-stopped
    ports:
      - "8000:8000" # Maps host port 8000 to container port 8000
    env_file:
      - .env # Loads environment variables from .env file
    environment:
      - ENABLE_METRICS=true
      - ENVIRONMENT=production
      - LOG_FILE_MAX_MB=100          # 100MB per log file
      - LOG_FILE_BACKUP_COUNT=10     # Keep 10 backup files (total ~1.1GB)
    # DNS optimization for faster external API calls
    dns:
      - 8.8.8.8      # Google DNS (primary)
      - 1.1.1.1      # Cloudflare DNS (secondary)
    dns_search: []   # Remove search domains to speed up resolution
    # Network performance optimizations (only available sysctls)
    sysctls:
      - net.ipv4.tcp_keepalive_time=600     # TCP keepalive settings
      - net.ipv4.tcp_keepalive_intvl=60     # Keepalive probe interval  
      - net.ipv4.tcp_keepalive_probes=3     # Number of keepalive probes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"] # Assumes app has a working root endpoint
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - app_logs:/app/logs # Use named volume instead of bind mount
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service,version"
    labels:
      - "service=market-ta-generator"
      - "version=0.1.0"
      - "logging=enabled"
    networks:
      - monitoring

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    networks:
      - monitoring

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  # Promtail for shipping logs to Loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - app_logs:/logs:ro # Mount persistent logs volume
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=MarketTA2025!Secure#Grafana
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitoring

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
